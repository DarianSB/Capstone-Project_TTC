data2_filled_updated2$Month_Name <- month(data2_filled_updated2$Date, label = TRUE, abbr = FALSE)
# Aggregate count by month name
incidents_by_month_name <- data2_filled_updated2 %>%
group_by(Month_Name) %>%
summarise(Total_Incidents = n()) %>%
mutate(Month_Name = reorder(Month_Name, -Total_Incidents)) # Reorder based on total incidents in descending order
# Plot the total number of incidents by month with month names in descending order
ggplot(incidents_by_month_name, aes(x = Month_Name, y = Total_Incidents)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = Total_Incidents), vjust = -0.3, size = 3.5) +
labs(title = "Total Number of Incidents by Month", x = "Month", y = "Total Incidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate the x-axis labels for better readability
# Print the plot
print(ggplot(incidents_by_month_name))
# MONTHWISE AVERAGE DELAY
# Load required libraries
library(dplyr)
library(ggplot2)
# Convert Date column to year-month format
data2_filled_updated2$Month <- format(data2_filled_updated2$Date, "%m")
# Aggregate data by month and calculate the mean Min Delay for each month
data_by_month <- data2_filled_updated2 %>%
group_by(Month) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Convert month numbers to month names
data_by_month$Month <- factor(month.name[as.numeric(data_by_month$Month)], levels = month.name)
# Reorder levels of Month according to Avg_Min_Delay in descending order
data_by_month <- data_by_month %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Month = factor(Month, levels = Month))
# Create bar plot
ggplot(data_by_month, aes(x = Month, y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Bar plot
geom_text(aes(label = round(Avg_Min_Delay, 2)), vjust = -0.5, color = "black", size = 3) +  # Add data labels
labs(title = "Average Min Delay by Month",
x = "Month",
y = "Average Min Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# MONTHWISE AVERAGE DELAY
# Load required libraries
library(dplyr)
library(ggplot2)
# Convert Date column to year-month format
data2_filled_updated2$Month <- format(data2_filled_updated2$Date, "%m")
# Aggregate data by month and calculate the mean Min Delay for each month
data_by_month <- data2_filled_updated2 %>%
group_by(Month) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Convert month numbers to month names
data_by_month$Month <- factor(month.name[as.numeric(data_by_month$Month)], levels = month.name)
# Reorder levels of Month according to Avg_Min_Delay in descending order
data_by_month <- data_by_month %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Month = factor(Month, levels = Month))
# Create bar plot
ggplot(data_by_month, aes(x = Month, y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Bar plot
geom_text(aes(label = round(Avg_Min_Delay, 2)), vjust = -0.5, color = "black", size = 3) +  # Add data labels
labs(title = "Average Min Delay by Month",
x = "Month",
y = "Average Min Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Load necessary libraries
library(dplyr)
library(lubridate)
# Extract month from the Date column and count incidents for each month
month_wise_incident_counts <- data2_filled_updated2 %>%
mutate(Month = month(Date, label = TRUE)) %>%
count(Month) %>%
mutate(Percentage = n / sum(n) * 100) %>%
arrange(Month)
# Print the month-wise counts and percentages
print(month_wise_incident_counts)
library(dplyr)
library(ggplot2)
# AVERAGE DELAY BY INCIDENT
# Aggregate data by incident and calculate the mean Min Delay for each incident
data_by_incident <- data2_filled_updated2 %>%
group_by(Incident) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Reorder levels of Incident according to Avg_Min_Delay in descending order
data_by_incident <- data_by_incident %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
# Create bar plot
ggplot(data_by_incident, aes(x = Incident, y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = "lightgreen") +  # Bar plot with different color
geom_text(aes(label = round(Avg_Min_Delay, 2)), position = position_stack(vjust = 0.5), color = "black", size = 3) +  # Add data labels in the middle of the bars
labs(title = "Average Delay by Incident",
x = "Incident",
y = "Average Min Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
subset_data2_filled_updated2<-data2_filled_updated2[,c("Incident","Delay_Severity")]
plot(subset_data2_filled_updated2)
# Assuming your tibble is named "data_tibble"
# Aggregate data by time period and calculate the mean Min Delay for each time period
data_by_time_period <- data2_filled_updated2 %>%
group_by(Time_Period) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Reorder levels of Time_Period according to Avg_Min_Delay in descending order
data_by_time_period <- data_by_time_period %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Time_Period = factor(Time_Period, levels = Time_Period))
# Create bar plot
ggplot(data_by_time_period, aes(x = Time_Period, y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = "lightblue") +  # Bar plot with different color
geom_text(aes(label = round(Avg_Min_Delay, 2)), position = position_stack(vjust = 0.5), color = "black", size = 3) +  # Add data labels in the middle of the bars
labs(title = "Average Delay by Time Period",
x = "Time Period",
y = "Average Min Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Create a customized boxplot to clearly see the interquartile range
ggplot(data2_filled_updated2, aes(x = Time_Period, y = `Min_Delay_Winsorized`)) +
geom_boxplot(coef = 1.5) +  # Adjust the coef parameter to control the length of the whiskers
labs(x = "Time_Period", y = "Min Delay", title = "Boxplot of Min Delay by Time_Period")
# Assuming your tibble is named "data_tibble"
# Aggregate data by day and calculate the mean Min Delay for each day
data_by_day <- data2_filled_updated2 %>%
group_by(Day) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Reorder levels of Day according to Avg_Min_Delay in descending order
data_by_day <- data_by_day %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Day = factor(Day, levels = Day))
# Create bar plot
ggplot(data_by_day, aes(x = Day, y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = "lightgreen") +  # Bar plot with different color
geom_text(aes(label = round(Avg_Min_Delay, 2)), position = position_stack(vjust = 0.5), color = "black", size = 3) +  # Add data labels in the middle of the bars
labs(title = "Average Delay by Day",
x = "Day",
y = "Average Min Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.grid.major = element_blank(), panel.grid.minor = element_blank())  # Rotate x-axis labels for better readability and remove gridlines
library(dplyr)
library(ggplot2)
# Assuming your tibble is named "data_tibble"
# Filter data for weekends (Saturday and Sunday) and weekdays
weekends <- data2_filled_updated2 %>%
filter(Day %in% c("Saturday", "Sunday"))
weekdays <- data2_filled_updated2 %>%
filter(Day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
# Perform t-test to compare average delays between weekends and weekdays
t_test_result <- t.test(weekends$`Min_Delay_Winsorized`, weekdays$`Min_Delay_Winsorized`, alternative = "greater", conf.level = 0.99)
# Print the result
print(t_test_result)
#This suggests that there is a statistically significant difference in average delays between weekends and weekdays. The 95% confidence interval for the difference in means ranges from 0.9767709 to infinity.based on the very small p-value (significantly less than any reasonable significance level such as 0.05), we can reject the null hypothesis
#The sample estimates indicate that the mean delay for weekends (21.16196) is higher than the mean delay for weekdays (19.68358).
# Calculate average delays for weekends and weekdays
average_delay_weekends <- mean(weekends$`Min_Delay_Winsorized`)
average_delay_weekdays <- mean(weekdays$`Min_Delay_Winsorized`)
# Create a bar plot to visualize the average delays between weekends and weekdays
average_delays <- data.frame(
Day = c("Weekends", "Weekdays"),
Average_Delay = c(average_delay_weekends, average_delay_weekdays)
)
# Bar plot with data labels
ggplot(average_delays, aes(x = Day, y = Average_Delay, fill = Day)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f", Average_Delay)), vjust = -0.5, size = 3.5, color = "black") +  # Add data labels
labs(x = "Day", y = "Average Delay", title = "Average Delay Between Weekends and Weekdays") +
theme_minimal()
# Extract the year from the Date column
data2_filled_updated2 <- mutate(data2_filled_updated2, Year = lubridate::year(Date))
# Calculate average Min. Delay for each year
average_delay <- data2_filled_updated2 %>%
group_by(Year) %>%
summarize(Avg_Delay = mean(`Min_Delay_Winsorized`))
# Plot the trend
ggplot(average_delay, aes(x = Year, y = Avg_Delay)) +
geom_line() +
geom_point() +
labs(title = "Trend of Average Min. Delay Over the Years",
x = "Year",
y = "Average Min. Delay") +
theme_minimal()
# Filter data for years 2021, 2022, and 2023
filtered_data <- data2_filled_updated2 %>%
filter(Year %in% c(2021, 2022, 2023))
# Count incidents for each year
incident_count <- filtered_data %>%
group_by(Year, Incident) %>%
summarize(Count = n())
# Plot the trend
ggplot(incident_count, aes(x = Year, y = Count, color = Incident)) +
geom_line() +
geom_point() +
labs(title = "Trend of Total Incidents Over the Years",
x = "Year",
y = "Total Incidents",
color = "Incident Type") +
theme_minimal()
# Filter data for years 2021, 2022, and 2023
filtered_data <- data2_filled_updated2 %>%
filter(Year %in% c(2021, 2022, 2023))
# Count total incidents for each year
incident_count <- filtered_data %>%
group_by(Year) %>%
summarize(Total_Incidents = n())
# Plot the trend
ggplot(incident_count, aes(x = Year, y = Total_Incidents)) +
geom_line() +
geom_point() +
labs(title = "Trend of Total Incidents Over the Years",
x = "Year",
y = "Total Incidents") +
theme_minimal()
# Aggregate data by route and calculate the mean Min Delay for each route
data_by_route <- data2_filled_updated2 %>%
group_by(Route) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Reorder levels of Route according to Avg_Min_Delay in descending order
data_by_route <- data_by_route %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Route = factor(Route, levels = Route))
# Select the top 25 routes with the highest average minimum delay
top_routes <- head(data_by_route, 20)
# Create bar plot for the top 20 routes
ggplot(top_routes, aes(x = reorder(Route, Avg_Min_Delay), y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = ifelse(rank(-top_routes$Avg_Min_Delay) %% 2 == 0, "lightblue", "lightgreen")) +  # Alternating bar colors
geom_text(aes(label = round(Avg_Min_Delay, 2)), position = position_dodge(width = 0.9), vjust = -0.5, color = "black", size = 3) +  # Add data label above bars
coord_flip() +  # Flip coordinates for horizontal bar chart
labs(title = "Top 20 Routes with Highest Average Min Delay",
x = "Route",
y = "Average Min Delay") +
theme_minimal()
# Aggregate data by route and calculate the mean Min Delay for each route
data_by_location <- data2_filled_updated2 %>%
group_by(Location) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Reorder levels of Route according to Avg_Min_Delay in descending order
data_by_location <- data_by_location %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Location = factor(Location, levels = Location))
# Select the top 25 routes with the highest average minimum delay
top_location <- head(data_by_location, 20)
# Create bar plot for the top 20 routes
ggplot(top_location, aes(x = reorder(Location, Avg_Min_Delay), y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = ifelse(rank(-top_location$Avg_Min_Delay) %% 2 == 0, "lightblue", "lightgreen")) +  # Alternating bar colors
geom_text(aes(label = round(Avg_Min_Delay, 2)), position = position_dodge(width = 0.9), vjust = -0.5, color = "black", size = 3) +  # Add data label above bars
coord_flip() +  # Flip coordinates for horizontal bar chart
labs(title = "Top 20 Location with Highest Average Min Delay",
x = "Location",
y = "Average Min Delay") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Aggregate data to count the number of incidents per location
incident_counts <- data2_filled_updated2 %>%
group_by(Location) %>%
summarise(Incidents = n()) %>%
arrange(desc(Incidents)) %>%
top_n(20, Incidents)
# Plot the top 20 locations with the highest number of incidents, including data labels
ggplot(incident_counts, aes(x = reorder(Location, Incidents), y = Incidents)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = Incidents), position = position_stack(vjust = 0.5), color = "white") +
coord_flip() + # Flip the coordinates to make it a horizontal bar plot
labs(title = "Top 20 Locations with Highest Number of Incidents",
x = "Location",
y = "Number of Incidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Improve label readability
# Display the plot
ggsave("Top20_Locations_Incidents_with_Labels.png", width = 10, height = 8, dpi = 300)
# CHECK FOR DATA IMBALANCE
library(dplyr)
# Count the frequency of each level in the 'Incident' column and calculate percentage
incident_balance <- data2_filled_updated2 %>%
count(Incident) %>%
mutate(Percentage = n / sum(n) * 100) %>%
arrange(desc(n))
# Print the counts and percentages to check for imbalance
print(incident_balance)
str(data2_filled_updated2)
summary(lm (Min_Delay_Winsorized ~ Incident + Time_Period + Route + Day + Direction , data = data2_filled_updated2 ))
install.packages("class")
install.packages("gmodels")
library(class)
library(gmodels)
install.packages("class")
knitr::opts_chunk$set(echo = TRUE)
round(prop.table(table(data2_filled_updated2$Incident))*100,digits = 1)
normalize<-function(x){return((x-min(x))/(max(x)-min(x)))}
normalized<-as.data.frame(lapply(data2_filled_updated2[c(3,10,11,12,19)],normalize))
normalize<-function(x){return((x-min(x))/(max(x)-min(x)))}
normalized<-as.data.frame(lapply(data2_filled_updated2[c(3,10,11,12,19)],normalize))
# Perform 'Winsorization' to Fix Outlier Issues: capping the outliers at a certain percentile. For example, all data points above the 95th percentile and below the 5th percentile
library(DescTools)
# Winsorize the 'Min Delay' column at the 5th and 95th percentiles for the entire data
data2_filled_updated2$Min_Gap_Winsorized <- Winsorize(data2_filled_updated2$`Min Gap`, probs = c(0.02, 0.98))
# Check the results
summary(data2_filled_updated2$Min_Gap_Winsorized)
str(data2_filled_updated2)
install.packages("class")
install.packages("gmodels")
library(class)
library(gmodels)
install.packages("class")
round(prop.table(table(data2_filled_updated2$Incident))*100,digits = 1)
knitr::opts_chunk$set(echo = TRUE)
round(prop.table(table(data2_filled_updated2$Incident))*100,digits = 1)
normalize<-function(x){return((x-min(x))/(max(x)-min(x)))}
normalized<-as.data.frame(lapply(data2_filled_updated2[c(3,10,11,12,19)],normalize))
Preprocessed_dataset<-cbind(data2_filled_updated2$Incident,normalized,data2_filled_updated2$Time_Period,data2_filled_updated2$Month_Name,data2_filled_updated2$Day,data2_filled_updated2$Location)
str(Preprocessed_dataset)
knitr::opts_chunk$set(echo = TRUE)
str(Preprocessed_dataset)
subsets<-regsubsets(data2_filled_updated2$Incident ~.,
data=Preprocessed_dataset, nbest=1)
# Install the leaps package if it's not already installed
install.packages("leaps")
# Load the leaps package
library(leaps)
subsets<-regsubsets(data2_filled_updated2$Incident ~.,
data=Preprocessed_dataset, nbest=1)
set.seed(1)
index<-sample(1:nrow(Preprocessed_dataset),floor(nrow(Preprocessed_dataset)*0.8))
TTC_train<-Preprocessed_dataset[index,]
TTC_test<-Preprocessed_dataset[-index,]
install.packages("class")
install.packages("gmodels")
library(class)
library(gmodels)
TTC_train_labels<-TTC_train[,1]
TTC_test_labels<-TTC_test[,1]
TTC_test_prediction<-knn(train=TTC_train[,2:10],
test=TTC_test[,2:10],
cl=TTC_train[,1],
k=10)
# Check for NAs in the train dataset
sum(is.na(TTC_train))
# Check for NAs in the test dataset
sum(is.na(TTC_test))
# Check for Infs in the train dataset
sum(is.infinite(TTC_train))
sum(is.infinite(TTC_test))
install.packages("class")
install.packages("gmodels")
library(class)
library(gmodels)
TTC_train_labels<-TTC_train[,1]
TTC_test_labels<-TTC_test[,1]
TTC_test_prediction<-knn(train=TTC_train[,2:6],
test=TTC_test[,2:6],
cl=TTC_train[,1],
k=10)
install.packages("gmodels")
knitr::opts_chunk$set(echo = TRUE)
# MONTHWISE AVERAGE DELAY
# Load required libraries
library(dplyr)
library(ggplot2)
# Convert Date column to year-month format
data2_filled_updated2$Month <- format(data2_filled_updated2$Date, "%m")
# Aggregate data by month and calculate the mean Min Delay for each month
data_by_month <- data2_filled_updated2 %>%
group_by(Month) %>%
summarise(Avg_Min_Delay = mean(`Min_Delay_Winsorized`))
# Convert month numbers to month names
data_by_month$Month <- factor(month.name[as.numeric(data_by_month$Month)], levels = month.name)
# Reorder levels of Month according to Avg_Min_Delay in descending order
data_by_month <- data_by_month %>%
arrange(desc(Avg_Min_Delay)) %>%
mutate(Month = factor(Month, levels = Month))
# Create bar plot
ggplot(data_by_month, aes(x = Month, y = Avg_Min_Delay)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Bar plot
geom_text(aes(label = round(Avg_Min_Delay, 2)), vjust = -0.5, color = "black", size = 3) +  # Add data labels
labs(title = "Average Min Delay by Month",
x = "Month",
y = "Average Min Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
str(data2_filled_updated2)
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Month_Name) %>%
summarise(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay))
ggplot(data2_filled_updated3,aes(x=Month_Name,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="Month_Name") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=-0.5,color="black",size=3) +
labs(title=" Avg. Delay By Month",x="Month",y="Avg. Delay")
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Month_Name) %>%
summarise(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay))
ggplot(data2_filled_updated3,aes(x=Month_Name,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="blue") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=-0.5,color="black",size=3) +
labs(title=" Avg. Delay By Month",x="Month",y="Avg. Delay")
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Month_Name) %>%
summarise(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay))
ggplot(data2_filled_updated3,aes(x=Month_Name,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="orange") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=-0.5,color="black",size=3) +
labs(title=" Avg. Delay By Month",x="Month",y="Avg. Delay")
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Month_Name) %>%
summarise(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay))
ggplot(data2_filled_updated3,aes(x=Month_Name,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="orange") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=-0.5,color="black",size=3) +
labs(title=" Avg. Delay By Month",x="Month",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by("Incident") %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident=factor(Incident,levels=Incident)) %>%
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar() +
geom_text() +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by("Incident") %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident=factor(Incident,levels=Incident))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by("Incident") %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar() +
geom_text() +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar() +
geom_text() +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="lightyellow") +
geom_text() +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="lightyellow") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=0.5,color="black",size=4) +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="lightblue") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=0.5,color="black",size=4) +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="lightblue") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=-0.5,color="black",size=4) +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
data2_filled_updated3<-data2_filled_updated2 %>%
group_by(Incident) %>%
summarize(Avg_Delay=mean(Min_Delay_Winsorized)) %>%
arrange(desc(Avg_Delay)) %>%
mutate(Incident = factor(Incident, levels = Incident))
ggplot(data2_filled_updated3,aes(x=Incident,y=Avg_Delay)) +
geom_bar(stat = "identity",fill="lightblue") +
geom_text(aes(label=round(Avg_Delay,2)),vjust=0.0,color="black",size=4) +
labs(title = "Avg. Delay By incident",x="Incident",y="Avg. Delay") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45,hjust = 1))
